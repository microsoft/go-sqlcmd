// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package translations

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"de_DE": &dictionary{index: de_DEIndex, data: de_DEData},
		"en_US": &dictionary{index: en_USIndex, data: en_USData},
		"fr_CH": &dictionary{index: fr_CHIndex, data: fr_CHData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"'-a %d': Packet size has to be a number between 512 and 32767.": 0,
}

var de_DEIndex = []uint32{ // 2 elements
	0x00000000, 0x00000044,
} // Size: 32 bytes

const de_DEData string = "" + // Size: 68 bytes
	"\x02'-a %[1]d': Paketgröße muss eine Zahl zwischen 512 und 32767 sein"

var en_USIndex = []uint32{ // 2 elements
	0x00000000, 0x00000042,
} // Size: 32 bytes

const en_USData string = "" + // Size: 66 bytes
	"\x02'-a %[1]d': Packet size has to be a number between 512 and 32767."

var fr_CHIndex = []uint32{ // 2 elements
	0x00000000, 0x00000051,
} // Size: 32 bytes

const fr_CHData string = "" + // Size: 81 bytes
	"\x02'-a %[1]d': La taille du paquet doit être un nombre compris entre 51" +
	"2 et 32767."

	// Total table size 311 bytes (0KiB); checksum: F4BC218E
