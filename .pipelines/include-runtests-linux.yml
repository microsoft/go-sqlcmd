parameters:
- name: RunName
  type: string
- name: SQLCMDUSER
  type: string
  default: ''
- name: SQLPASSWORD
  type: string
  default: ''
- name: SQLCMDSERVER
  type: string
  default: .
- name: SQLCMDDBNAME
  type: string
  default: ''
steps:
  - script: |
      ~/go/bin/gotestsum --junitfile "${{ parameters.RunName }}.testresults.xml" -- ./... -coverprofile="${{ parameters.RunName }}.coverage.txt" -covermode count
      ~/go/bin/gocov convert "${{ parameters.RunName }}.coverage.txt" > "${{ parameters.RunName }}.coverage.json"
      ~/go/bin/gocov-xml < "${{ parameters.RunName }}.coverage.json" > ${{ parameters.RunName }}.coverage.xml
      mkdir -p coverage
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'run tests'
    env:
      SQLPASSWORD: ${{ parameters.SQLPASSWORD }}
      SQLCMDUSER: ${{ parameters.SQLCMDUSER }}
      SQLCMDPASSWORD: ${{ parameters.SQLPASSWORD }}
      SQLCMDSERVER: ${{ parameters.SQLCMDSERVER }}
      SQLCMDDBNAME: ${{ parameters.SQLCMDDBNAME }}
      AZURESUBSCRIPTION_CLIENT_ID : $(AZURESUBSCRIPTION_CLIENT_ID)
      AZURESUBSCRIPTION_TENANT_ID : $(AZURESUBSCRIPTION_TENANT_ID)
    continueOnError: true

  - task: PublishTestResults@2
    displayName: "Publish junit-style results"
    inputs:
      testResultsFiles: '${{ parameters.RunName }}.testresults.xml'
      testResultsFormat: JUnit
      searchFolder: '$(Build.SourcesDirectory)'
      testRunTitle: '${{ parameters.RunName }} - $(Build.SourceBranchName)'
      failTaskOnFailedTests: true
    condition: always()
