parameters:
- name: OS
  type: string
  default:
- name: Arch
  type: string
  default: 
- name: ArtifactName
  type: string
- name: VersionTag
  type: string
  default:  $(Build.BuildNumber)
- name: BinaryName
  type: string
- name: BinaryExt
  type: string

steps:
- task: GoTool@0
  inputs:
    version: '1.18'
    goBin: $(Build.SourcesDirectory)

- task: Go@0
  displayName: 'Go install go-winres'
  inputs:
    command: 'custom'
    customCommand: 'install'
    arguments: 'github.com/tc-hib/go-winres@latest'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/modern'
  env:
      GOBIN: $(Build.SourcesDirectory)

- task: CmdLine@2
  displayName: 'generate version resource'
  inputs:
    script: $(Build.SourcesDirectory)/go-winres make --file-version git-tag --product-version git-tag
    workingDirectory: '$(Build.SourcesDirectory)/cmd/modern'

- task: Go@0
  displayName: 'Go: get dependencies'
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/modern'
  env:
      GOOS: ${{ parameters.OS }}
      GOARCH: ${{ parameters.Arch }}
      GOBIN: $(Build.SourcesDirectory)

- task: Go@0
  displayName: 'Go: build sqlcmd'
  inputs:
    command: 'build'
    arguments: '-o $(Build.BinariesDirectory)/${{ parameters.BinaryName }}${{ parameters.BinaryExt }} -ldflags="-s -w -X main.version=${{ parameters.VersionTag }}"'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/modern'
  env:
      GOOS: ${{ parameters.OS }}
      GOARCH: ${{ parameters.Arch }}
      GOBIN: $(Build.SourcesDirectory)
      CGO_ENABLED: 0 # Enables Docker image based off 'scratch'

- task: Go@0
  displayName: 'Go: build sqlcmd with debug symbols'
  inputs:
    command: 'build'
    arguments: '-o $(Build.BinariesDirectory)/${{ parameters.BinaryName }}_debug${{ parameters.BinaryExt }} -ldflags="-X main.version=${{ parameters.VersionTag }}"'
    workingDirectory: '$(Build.SourcesDirectory)/cmd/modern'
  env:
      GOOS: ${{ parameters.OS }}
      GOARCH: ${{ parameters.Arch }}
      GOBIN: $(Build.SourcesDirectory)
      CGO_ENABLED: 0 # Enables Docker image based off 'scratch'

- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    SourceFolder: '$(Build.BinariesDirectory)'
    Contents: '**'

- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: 'NOTICE.md'

- task: PublishPipelineArtifact@1
  displayName: 'Publish binary'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifactName: 'Sqlcmd${{ parameters.ArtifactName }}'

